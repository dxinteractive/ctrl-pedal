{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"SEND_ROTA",
				"SEND_ROTARY_BUTTON"
			],
			[
				"endTr",
				"endTransmission"
			],
			[
				"begin",
				"beginTransmission"
			],
			[
				"rece",
				"receiveData"
			],
			[
				"_r",
				"_registry"
			],
			[
				"le",
				"leaves"
			],
			[
				"par",
				"Parcel"
			],
			[
				"su",
				"submit"
			],
			[
				"key",
				"keyPath"
			],
			[
				"parcel",
				"parcelData"
			],
			[
				"_t",
				"_treeshare"
			],
			[
				"re",
				"rendered"
			],
			[
				"pre",
				"previous"
			],
			[
				"get",
				"getPath"
			],
			[
				"pay",
				"payload"
			],
			[
				"payload",
				"payloadIsMissing"
			],
			[
				"meta",
				"metaKey"
			],
			[
				"MO",
				"ModifierObject"
			],
			[
				"Modif",
				"Modifiers"
			],
			[
				"MOdifi",
				"Modifiers"
			],
			[
				"_va",
				"_valueParcelMethods"
			],
			[
				"_pa",
				"_parentParcelMethods"
			],
			[
				"_action",
				"_actionMethods"
			],
			[
				"pipe",
				"pipeWith"
			],
			[
				"Parcel",
				"ParcelConfig"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <Arduino.h>\n#include <SPI.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n#include <Audio.h>\n#include <Encoder.h>\n\n/*AudioInputI2S i2sInput;\nAudioAnalyzeNoteFrequency notefreq; // AUDIO_GUITARTUNER_BLOCKS = 9\nAudioAnalyzePeak peak;\nAudioAnalyzeRMS rms;\nAudioConnection patchCord1(i2sInput, 1, notefreq, 0);\nAudioConnection patchCord2(i2sInput, 1, peak, 0);\nAudioConnection patchCord3(i2sInput, 1, rms, 0);*/\n\n// AudioSynthToneSweep tonesweep1;\n// AudioOutputI2S i2sOuptut;\n// AudioConnection patchCord3(tonesweep1, 0, i2sOuptut, 0);\n// AudioConnection patchCord4(tonesweep1, 0, i2sOuptut, 1);\n\n// AudioControlSGTL5000 audioAdaptor;\n\n#define PIN_OLED_DC        0\n#define PIN_OLED_RESET     1\n#define PIN_OLED_CS        2\n#define PIN_CV_CS          3\n#define PIN_ROTARY_1       4\n#define PIN_ROTARY_2       5\n#define PIN_ROTARY_BUTTON  6\n#define PIN_BYPASS_SWITCH  10\n#define PIN_SR_CS          8\n#define PIN_TAP_BUTTON     17\n#define PIN_LED_1          21\n#define PIN_LED_2          20\n#define EXP_1              A2\n#define EXP_2              A1\n\n#define SEND_ROTARY_VALUE  0\n#define SEND_ROTARY_BUTTON 1\n#define SEND_TAP_BUTTON    2\n#define SEND_BYPASS_SWITCH 3\n#define SEND_EXP_1         4\n#define SEND_EXP_2         5\n#define SEND_TOTAL         6\n\n#define SET_CV             0\n#define SET_AUDIO_ROUTE    1\n#define SET_LED            2\n#define SET_OLED           3 // not used yet\n#define SET_BB_OLED        7 // not used yet\n#define SET_BB_LED_UPPER   8 // not used yet\n#define SET_BB_LED_LOWER   9\n\n#define SERIAL_RECEIVE_MAX 10\n\n#define BB_I2C_CHANNEL 8\n\nstatic const int CVS[] = {5, 6, 8, 7, 1, 4, 2, 3};\n\nstatic const int LEDS[] = {PIN_LED_1, PIN_LED_2};\n\nstatic const int LED_BRIGHTNESS_TABLE[] = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\n  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,\n  0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,\n  0x05, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,\n  0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n  0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2B, 0x2C,\n  0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x43, 0x45, 0x47, 0x4A, 0x4C, 0x4F,\n  0x51, 0x54, 0x57, 0x59, 0x5C, 0x5F, 0x62, 0x64, 0x67, 0x6A, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C,\n  0x7F, 0x82, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x97, 0x9A, 0x9C, 0x9F, 0xA2, 0xA5, 0xA7, 0xAA,\n  0xAD, 0xAF, 0xB2, 0xB4, 0xB7, 0xB9, 0xBB, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,\n  0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 0xDE, 0xDF, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,\n  0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xED, 0xEE, 0xEF, 0xEF, 0xF0, 0xF1, 0xF1, 0xF2,\n  0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8,\n  0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFC,\n  0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,\n  0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF\n};\n\n// Adafruit_SSD1306 display(PIN_OLED_DC, PIN_OLED_RESET, PIN_OLED_CS);\n\nEncoder rotary(PIN_ROTARY_1, PIN_ROTARY_2);\n\n//\n// CV\n//\n\nvoid setCV(long chn, long val) {\n  int h = (chn << 4) | (val >> 6);\n  int l = (val << 2);\n  SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));\n  digitalWrite(PIN_CV_CS, LOW);\n  SPI.transfer(h);\n  SPI.transfer(l);\n  SPI.endTransaction();\n  digitalWrite(PIN_CV_CS, HIGH);\n  digitalWrite(PIN_CV_CS, LOW);\n}\n\n//\n// Shift register (tap + relay)\n//\n\nboolean audioOutputPath = 0; // default to off\nint activeTaps = 63; // all taps\nint shiftRegisterState = activeTaps;\n\nvoid syncSR() {\n  SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));\n  digitalWrite(PIN_SR_CS,LOW);\n  SPI.transfer(shiftRegisterState);\n  SPI.endTransaction();\n  digitalWrite(PIN_SR_CS,HIGH);\n  digitalWrite(PIN_SR_CS,LOW);\n}\n\n// void setSR(int id, boolean value) {\n//   if(value) {\n//     activeTaps |= (1u << id);\n//   } else {\n//     activeTaps &= ~(1u << id);\n//   }\n// }\n\nvoid setAudioRoute(boolean value) {\n  if(value) {\n    shiftRegisterState |= 128;\n  } else {\n    shiftRegisterState &= 127;\n  }\n  syncSR();\n}\n\n//\n// LEDs\n//\n\nvoid setLed(int pin, int brightness) {\n  analogWrite(pin, 255); //LED_BRIGHTNESS_TABLE[brightness]);\n}\n\n//\n// Button board\n//\n\nvoid sendButtonBoardMessage(const char * data, int len) {\n  Wire.beginTransmission(BB_I2C_CHANNEL);\n  Wire.write(data, len);\n  Wire.endTransmission();\n}\n\n//\n// Serial send\n//\n\nint serialSendMemory[SEND_TOTAL] = {};\n\nvoid serialSend(int id, int value) {\n  if(value == serialSendMemory[id]) return;\n  Serial.print(id);\n  Serial.print(':');\n  Serial.println(value);\n  serialSendMemory[id] = value;\n}\n\n//\n// Serial receive\n//\n\nvoid serialReceive(const char * data, int len) {\n  const char * valueString = data + 3;\n  int target = data[0] - '0';\n  int subtarget = data[1] - '0';\n\n  switch(target) {\n    case SET_CV:\n      setCV(CVS[subtarget], atoi(valueString));\n      break;\n\n    case SET_AUDIO_ROUTE:\n      setAudioRoute(atoi(valueString));\n      break;\n\n    case SET_LED:\n      setLed(LEDS[subtarget], atoi(valueString));\n      break;\n\n    case SET_BB_LED_UPPER:\n    case SET_BB_LED_LOWER:\n    case SET_BB_OLED:\n      sendButtonBoardMessage(data, len);\n      break;\n\n    default:\n      break;\n  }\n}\n\nvoid serialReceiveByte(const byte inByte) {\n  static char inputLine[SERIAL_RECEIVE_MAX];\n  static unsigned int inputPos = 0;\n\n  switch(inByte) {\n    case '\\n':\n      inputLine[inputPos] = 0;\n      serialReceive(inputLine, inputPos + 1);\n      inputPos = 0;\n      break;\n\n    case '\\r':\n      break;\n\n    default:\n      if(inputPos < (SERIAL_RECEIVE_MAX - 1))\n        inputLine[inputPos++] = inByte;\n      break;\n  }\n}\n\n//\n// Setup\n//\n\nvoid setup() {\n  // SPI\n  SPI.setMOSI(7);\n  SPI.setSCK(14);\n\n  // SPI select\n  pinMode(PIN_CV_CS, OUTPUT);\n  pinMode(PIN_SR_CS, OUTPUT);\n  digitalWrite(PIN_CV_CS, HIGH);\n  digitalWrite(PIN_SR_CS, HIGH);\n\n  // LEDs\n  pinMode(PIN_LED_1, OUTPUT);\n  pinMode(PIN_LED_2, OUTPUT);\n  digitalWrite(PIN_LED_1, LOW);\n  digitalWrite(PIN_LED_2, LOW);\n\n  // buttons\n  pinMode(PIN_ROTARY_BUTTON, INPUT_PULLUP);\n  pinMode(PIN_TAP_BUTTON, INPUT_PULLUP);\n  pinMode(PIN_BYPASS_SWITCH, INPUT_PULLUP);\n\n  // audio\n  // AudioMemory(90);\n  // notefreq.begin(0.03);\n\n  // audioAdaptor.enable();\n  // audioAdaptor.inputSelect(AUDIO_INPUT_LINEIN);\n  // audioAdaptor.micGain(0);\n  // audioAdaptor.lineInLevel(12);\n  // audioAdaptor.lineOutLevel(31);\n  // audioAdaptor.dacVolume(0.9);\n  // audioAdaptor.muteHeadphone();\n  // audioAdaptor.adcHighPassFilterDisable();\n\n  // serial\n  Serial.begin(115200);\n  serialReceiveByte('\\n');\n\n  // i2c\n  Wire.begin();\n\n  // display\n  // display.begin(SSD1306_SWITCHCAPVCC);\n  // display.clearDisplay();\n  // display.display();\n\n  // test tone\n  // setAudioRoute(true);\n  // tonesweep1.play(1.0, 50.0, 1000.0, 100.0);\n}\n\nunsigned long time;\nunsigned long prevTime;\nunsigned long ticks;\n\nfloat peakValue = 0;\nfloat rmsValue = 0;\n\nvoid updateDisplay() {\n  /*display.clearDisplay();\n  display.setTextColor(INVERSE);\n  display.setTextSize(2);\n  display.setCursor(0,0);\n  display.println(\":)\");\n  display.setTextSize(1);\n  display.println(ticks);\n  display.setTextSize(1);\n  display.println(peakValue);\n  display.println(rmsValue);\n  display.println(audioOutputPath);\n  display.display();*/\n}\n\nvoid loop() {\n  time = millis();\n  if(time == prevTime) return;\n\n  // main loop once per 1ms = 1000Hz\n  prevTime = time;\n  ticks++;\n\n  while(Serial.available () > 0) {\n    serialReceiveByte(Serial.read());\n  }\n\n  // once per 8ms = ~125fps\n  if(ticks % 1024 == 0) {\n    updateDisplay();\n  }\n\n  // once per 8ms = ~125Hz\n  if(ticks % 8 == 0) {\n    serialSend(SEND_ROTARY_VALUE, rotary.read());\n    serialSend(SEND_ROTARY_BUTTON, digitalRead(PIN_ROTARY_BUTTON) == LOW);\n    serialSend(SEND_BYPASS_SWITCH, digitalRead(PIN_BYPASS_SWITCH) == LOW);\n    serialSend(SEND_TAP_BUTTON, digitalRead(PIN_TAP_BUTTON) == LOW);\n\n    setLed(PIN_LED_1, digitalRead(PIN_BYPASS_SWITCH) == LOW ? 0 : 128);\n  }\n\n  // once per 128ms = ~8Hz\n  if(ticks % 128 == 0) {\n    analogRead(EXP_1);\n    serialSend(SEND_EXP_1, analogRead(EXP_1));\n  }\n\n  // once per 128ms = ~8Hz\n  if((ticks + 64) % 128 == 0) {\n    analogRead(EXP_2);\n    serialSend(SEND_EXP_2, analogRead(EXP_2));\n  }\n\n  // once per 4ms = ~250Hz\n  /*if(ticks % 4 == 0) {\n    if(peak.available()) {\n      peakValue = peak.read();\n    }\n    if(rms.available()) {\n      rmsValue = rms.read();\n    }\n  }*/\n\n  // once per 1024ms = ~1Hz\n  if(ticks % 1024 == 0) {\n    Serial.print(\"wire got \");\n    Wire.requestFrom(BB_I2C_CHANNEL, 6);\n    while (Wire.available()) {\n      char c = Wire.read();\n      Serial.print(c);\n    }\n    Serial.println(\".\");\n  }\n\n  // cv += (16 * cvDir);\n  // if(cv > 1023)\n  // {\n  //   cvDir = -1;\n  //   cv = 1023;\n  // } else if(cv < 0) {\n  //   cvDir = 1;\n  //   cv = 0;\n  // }\n\n  // for(int j = 0; j < 8; j++)\n  //   setCV(j, cv);\n\n  // setSR(ticks >> 5);\n\n  // setLed(PIN_LED_1, (ticks << 2) & 255);\n  // setLed(PIN_LED_2, 252 - ((ticks << 2) & 255));\n\n\n\n\n  // if(notefreq.available()) {\n  //     float newFreq = notefreq.read();\n  //     freq += (newFreq - freq) * 0.3;\n  //     pitchIdentifier.identify(freq);\n  //     pitch = pitchIdentifier.pitch();\n  //     display.setCursor(64,0);\n  //     display.println(freq);\n  // }\n\n\n\n  // int cpuusage = AudioProcessorUsageMax();\n  // display.print(\"CPU: \");\n  // display.println(cpuusage);\n}\n",
			"settings":
			{
				"buffer_size": 9720,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 9629,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Deviot: ",
				"Deviot: Device(s)"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"dev",
				"Deviot: About Deviot"
			],
			[
				"save",
				"Project: Save As"
			],
			[
				"op",
				"Project Manager: Open Project in New Window"
			],
			[
				"buildv",
				"Disable/Enable buildview for this window"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"sav",
				"Project: Save As"
			],
			[
				"subli",
				"SublimeLinter: Show All Errors"
			],
			[
				"lint",
				"SublimeLinter: Toggle Highlights"
			],
			[
				"proj",
				"Project: Save As"
			],
			[
				"theme",
				"Activate Materialize Theme"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"gruv",
				"gruvbox: Select Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"side",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"gru",
				"gruvbox: Select Theme"
			]
		],
		"width": 549.0
	},
	"console":
	{
		"height": 209.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/damien/projects/arduino/Ctrl",
		"/home/damien/projects/arduino/Ctrl/src"
	],
	"file_history":
	[
		"/home/damien/projects/arduino/Ctrl/src/main.cpp",
		"/home/damien/projects/arduino/Ctrl/.gitignore",
		"/home/damien/projects/arduino/Ctrl/lib/SparkFun_ZX_Distance_and_Gesture_Sensor_Arduino_Library-master/examples/I2C_Gesture_Demo/I2C_Gesture_Demo.ino",
		"/home/damien/projects/arduino/Ctrl/lib/SparkFun_ZX_Distance_and_Gesture_Sensor_Arduino_Library-master/src/ZX_Sensor.cpp",
		"/home/damien/projects/arduino/Ctrl/lib/SparkFun_ZX_Distance_and_Gesture_Sensor_Arduino_Library-master/src/ZX_Sensor.h",
		"/home/damien/projects/arduino/Ctrl/platformio.ini",
		"/tmp/Deviot/1610751263/src/1610751263.ino",
		"/home/damien/projects/arduino/Ctrl/src/test/boxed-test.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/audio-display-dac-shift-led.cpp.test",
		"/home/damien/projects/arduino/Ctrl/platformio.sublime-project",
		"/home/damien/Desktop/What accomplishments are you most proud of? Detail",
		"/home/damien/projects/arduino/Ctrl/src/test/audio-display-dac-shift.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/shift.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/audio-display-dac.cpp.test",
		"/home/damien/projects/parcels.sublime-project",
		"/home/damien/projects/Ctrl",
		"/home/damien/projects/arduino/Ctrl/src/test/display.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/hardware-spi-dac.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/dac.cpp.test",
		"/home/damien/projects/arduino/Ctrl/lib/SerialFlash/extras/rawfile-uploader.py",
		"/home/damien/projects/arduino/Ctrl/src/test/blink.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/audio.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/audio-display.cpp.test",
		"/home/damien/projects/arduino/Ctrl/src/test/display-test.cpp",
		"/home/damien/projects/arduino/Ctrl/src/test/audio-display-test.cpp",
		"/home/damien/projects/arduino/Ctrl/lib/Adafruit_SSD1306/Adafruit_SSD1306.cpp",
		"/home/damien/projects/arduino/Ctrl/src/test/audio-test.cpp",
		"/home/damien/Downloads/Adafruit_SSD1306/Adafruit_SSD1306.h",
		"/home/damien/Downloads/Adafruit_SSD1306/Adafruit_SSD1306.cpp",
		"/home/damien/projects/arduino/Ctrl/lib/Adafruit_SSD1306/Adafruit_SSD1306.h",
		"/tmp/Deviot/1526192340/src/1526192340.ino",
		"/home/damien/projects/arduino/Ctrl/src/test/blink-test.cpp",
		"/home/damien/.cache/.fr-ja7No6/Adafruit_SSD1306/Adafruit_SSD1306.cpp",
		"/media/damien/Yay Disk/make/arduino/Blink/Blink.ino",
		"/home/damien/projects/arduino/Ctrl/src/test/blink.cpp",
		"/home/damien/projects/arduino/Ctrl/src/bitshift-audio-signal-test.ino",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/01-simpleObjects.jsx",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ModifyMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ModifyMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/modifiers/__test__/Modifiers-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/modifiers/Modifiers.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/04-forms.jsx",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ValueParcelMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/treeshare/Treeshare.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/IdMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ValueParcelMethods.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/03-meta.jsx",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/Parcel.js",
		"/home/damien/projects/parcels/packages/parcels/src/action/Action.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ActionMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/action/Reducer.js",
		"/home/damien/projects/parcels/packages/parcels/src/action/__test__/Reducer-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/action/ActionCreators.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelId/ParcelId.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ParcelTypes.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/TopLevelMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/TopLevelMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ParcelTypes-test.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/layouts/index.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/layouts/example.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/01-object.jsx",
		"/home/damien/projects/parcels/packages/parcels-docs/src/components/Example.jsx",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/03-form.jsx",
		"/home/damien/projects/parcels/packages/parcels-docs/src/layouts/index.scss",
		"/home/damien/projects/parcels/packages/parcels-docs/gatsby-node.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/components/Markdown.jsx",
		"/home/damien/projects/parcels/package.json",
		"/home/damien/projects/parcels/packages/parcels-docs/package.json",
		"/home/damien/projects/parcels/packages/parcels-docs/.cache/root.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/layouts/fullwidth.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/02-object.jsx",
		"/home/damien/projects/parcels/packages/parcels-react/src/PureParcel.jsx",
		"/home/damien/projects/parcels/packages/parcels-docs/docs/home.md",
		"/home/damien/projects/parcels/.circleci/config.yml",
		"/home/damien/projects/parcels/packages/parcels-react/src/__test__/PureMapper-test.js",
		"/home/damien/projects/parcels/packages/parcels-react/src/__test__/PureParcel-test.js",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/01-simplest.jsx",
		"/home/damien/projects/parcels/packages/parcels-docs/src/examples/03-objectWithMeta.jsx",
		"/home/damien/projects/parcels/packages/parcels-docs/gatsby-config.js",
		"/home/damien/.zshrc",
		"/home/damien/.bashrc",
		"/home/damien/.zprofile",
		"/home/damien/.zshrc.local",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ParentParcelMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ElementParcelMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/__test__/getIn-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/getIn.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/IndexedParcelMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/types/Types.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/get.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/swapPrev.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/swapNext.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/swap.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/decodeHashKey.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/setIn.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/set.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/push.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/pop.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/insertBefore.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/insertAfter.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/has.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/delete.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/shift.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/unshift.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/updateChild.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/updateChildKeys.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/updateIn.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/forEach.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ActionMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ParentParcelMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/RootParcelMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ElementParcelMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/IndexedParcelMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/__test__/insertAfter-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/__test__/insertBefore-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ChildParcelMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/MethodCreator.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ChildParcelMethods-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ParentParcel.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ParentParcel-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/__test__/get-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/IdMethods.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelData/__test__/updateChildKeys-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/__test__/ValueParcel-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/react/__test__/PureMapper-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/react/__test__/PureParcel-test.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcelId/Id.js",
		"/home/damien/projects/parcels/packages/parcels/src/parcel/ValueParcel.js"
	],
	"find":
	{
		"height": 80.0
	},
	"find_in_files":
	{
		"height": 182.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"rms",
			"AudioAnalyzeRMS",
			"AudioAnalyzePeak",
			"rmsValue",
			"setCV",
			"CVS",
			"setCV",
			"CVS",
			"route",
			"setAudioRoute",
			"SET_AUDIO_ROUTE",
			"AUDIO",
			"setCV",
			"128",
			"setCV",
			"1000",
			"LOW",
			"digitalWrite",
			"PIN_LED_1",
			"setLed",
			"LED_BRIGHTNESS_TABLE",
			"display",
			"disp",
			"audioAdaptor",
			"notefr",
			"peak",
			"i2sInput",
			"updateDisplay",
			"dis",
			"LED",
			"SET_BB_LED_UPPER",
			"SET_BB_OLED",
			"SET_BB_LED_UPPER",
			"sendButtonBoardMessage",
			"SEND_ROTARY_BUTTON",
			"sendButtonBoardMessage",
			"serialReceive",
			"sendButtonBoardMessage",
			"serialReceive",
			"sendButtonBoardMessage",
			"serialReceive",
			"sendButtonBoardMessage",
			"beginTransaction",
			"sendButtonBoardMessage",
			"SET_BB_LED",
			"SET_BB_OLED",
			"SET_BB_LED",
			"SET_BB_0LED",
			"SET_BB_LED",
			"serialReceive",
			"sendButtonBoardMessage",
			"BB_I2C_CHANNEL",
			"SERIAL_RECEIVE_MAX",
			"serialReceiveByte",
			"BB_I2C_CHANNEL",
			"CTRL_BUTTON_BOARD_I2C_CHANNEL",
			"serialReceiveByte",
			"SET_BB_LED",
			"SET_AUDIO_ROUTE",
			"SET_LED",
			"CTRL_BUTTON_BOARD_I2C_CHANNEL",
			"Wire",
			"Serial",
			"Serial.",
			"Wire",
			"Wire.",
			"display.",
			"audioOutputPath",
			"peak",
			"peakValue",
			"rmsValue",
			"peakValue",
			"serialReceive",
			"setAudioRoute",
			"audioOutputPath",
			"setAudioRoute",
			"syncSR",
			"i2s1",
			"setAudioRoute",
			"SET_AUDIO_ROUTE",
			"setSR",
			"SET_CV",
			"SET_TAP",
			"setSR",
			"shiftRegister",
			"PIN_LED_2",
			"setLed",
			"Serial.",
			"setSR",
			"CVS",
			"PIN_CV_CS",
			"4000000",
			"'",
			"setCV",
			"char",
			"SET_LED",
			"things",
			"3",
			"shiftRegister",
			"'",
			"SEND",
			"MAX_INPUT",
			"input_pos",
			"input_line",
			"MAX_INPUT",
			"receiveByte",
			"prevMillis",
			"Serial.",
			"serialSend",
			"tempBuffer",
			"newData",
			"receivedChars",
			"newData",
			"numChars",
			"        ",
			"serialReceive",
			"receiveValue",
			"sendValue",
			"peak",
			"WHITE",
			"setText",
			"serialData",
			"delayTime",
			"peak",
			"SEND_BYPASS_SWITCH",
			"SEND_TOTAL",
			"SEND_TAP_BUTTON",
			"32"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9720,
						"regions":
						{
						},
						"selection":
						[
							[
								7453,
								7453
							]
						],
						"settings":
						{
							"default_dir": "/home/damien/projects/arduino/Ctrl/src",
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9425.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9629,
						"regions":
						{
						},
						"selection":
						[
							[
								320,
								320
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 107.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 42.0
	},
	"input":
	{
		"height": 80.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.deviot":
	{
		"height": 306.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Ctrl.sublime-project",
	"replace":
	{
		"height": 80.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mode",
				"packages/parcels/src/modifiers/Modifiers.js"
			],
			[
				"form",
				"packages/parcels-docs/src/examples/04-forms.jsx"
			],
			[
				"value",
				"packages/parcels/src/parcel/__test__/ValueParcelMethods-test.js"
			],
			[
				"tree",
				"packages/parcels/src/treeshare/Treeshare.js"
			],
			[
				"idm",
				"packages/parcels/src/parcel/__test__/IdMethods-test.js"
			],
			[
				"tre",
				"packages/parcels/src/treeshare/Treeshare.js"
			],
			[
				"red",
				"packages/parcels/src/action/Reducer.js"
			],
			[
				"action",
				"packages/parcels/src/action/Action.js"
			],
			[
				"p",
				"packages/parcels/src/parcel/Parcel.js"
			],
			[
				"parc",
				"packages/parcels/src/parcel/Parcel.js"
			],
			[
				"reduc",
				"packages/parcels/src/action/Reducer.js"
			],
			[
				"type",
				"packages/parcels/src/types/Types.js"
			],
			[
				"par",
				"packages/parcels/src/parcel/Parcel.js"
			],
			[
				"types",
				"packages/parcels/src/types/Types.js"
			],
			[
				"reducer",
				"packages/parcels/src/action/__test__/Reducer-test.js"
			],
			[
				"re",
				"packages/parcels/src/action/Reducer.js"
			],
			[
				"a",
				"packages/parcels/src/action/Action.js"
			],
			[
				"act",
				"packages/parcels/src/action/Action.js"
			],
			[
				"actionc",
				"packages/parcels/src/action/ActionCreators.js"
			],
			[
				"modifiers",
				"packages/parcels/src/modifiers/Modifiers.js"
			],
			[
				"actionm",
				"packages/parcels/src/parcel/ActionMethods.js"
			],
			[
				"ac",
				"packages/parcels/src/action/Action.js"
			],
			[
				"t",
				"packages/parcels/src/types/Types.js"
			],
			[
				"parce",
				"packages/parcels/src/parcel/Parcel.js"
			],
			[
				"modifyme",
				"packages/parcels/src/parcel/ModifyMethods.js"
			],
			[
				"modif",
				"packages/parcels/src/parcel/ModifyMethods.js"
			],
			[
				"elem",
				"packages/parcels/src/parcel/ElementParcelMethods.js"
			],
			[
				"indexed",
				"packages/parcels/src/parcel/IndexedParcelMethods.js"
			],
			[
				"actioncreators",
				"packages/parcels/src/action/ActionCreators.js"
			],
			[
				"parent",
				"packages/parcels/src/parcel/ParentParcelMethods.js"
			],
			[
				"parentpar",
				"packages/parcels/src/parcel/__test__/ParentParcel-test.js"
			],
			[
				"parentp",
				"packages/parcels/src/parcel/ParentParcel.js"
			],
			[
				"parentpa",
				"packages/parcels/src/parcel/ParentParcel.js"
			],
			[
				"purepa",
				"packages/parcels/src/react/__test__/PureParcel-test.js"
			],
			[
				"puremapper",
				"packages/parcels/src/react/__test__/PureMapper-test.js"
			],
			[
				"vlu",
				"packages/parcels/src/parcel/__test__/ValueParcel-test.js"
			],
			[
				"modify",
				"packages/parcels/src/parcel/__test__/ModifyMethods-test.js"
			],
			[
				"updatec",
				"packages/parcels/src/parcelData/updateChildKeys.js"
			],
			[
				"purema",
				"packages/parcels/src/react/__test__/PureMapper-test.js"
			],
			[
				"actiont",
				"packages/parcels/src/reducer/ActionCreators.js"
			],
			[
				"pa",
				"packages/parcels/src/parcel/Parcel.js"
			],
			[
				"parcel",
				"packages/parcels/src/parcel/Parcel.js"
			],
			[
				"ty",
				"packages/parcels/src/types/Types.js"
			],
			[
				"idfiltermodifiers",
				"packages/parcels/src/parcelId/filterModifiers.js"
			],
			[
				"stripparceldata",
				"proto-parcels/src/util/stripParcelData.js"
			],
			[
				"na",
				"parcels/packages/parcels-docs/src/components/Navigation.jsx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 377.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
